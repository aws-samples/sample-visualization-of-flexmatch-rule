/**
 * このファイルは、Vitestテストフレームワークの基本的な使用例を示すサンプルテストです。
 * 
 * 用途:
 * 1. テスト環境が正しく設定されているかを確認するための最小限のテスト
 * 2. CI/CDパイプラインでのテスト実行の検証用
 * 3. 新しい開発者向けのテスト作成の参考例
 * 
 * このテストは常に成功する単純なアサーション（expect(true).toBe(true)）を含んでおり、
 * 実際のアプリケーションコードをテストするものではありません。
 * 
 * プロジェクトの実際のコンポーネントをテストする場合は、このファイルを参考に
 * 新しいテストファイルを作成し、適切なインポートとアサーションを追加してください。
 * 
 * 【テスト構文の説明】
 * - describe(): テストスイートを定義する関数。関連するテストケースをグループ化します。
 *   第1引数: テストスイートの名前（文字列）
 *   第2引数: テストケースを含むコールバック関数
 * 
 * - it(): 個別のテストケースを定義する関数。(test()と同じ機能)
 *   第1引数: テストケースの説明（文字列）
 *   第2引数: テストロジックを含むコールバック関数
 * 
 * - expect(): アサーション（検証）を作成する関数。テスト対象の値を受け取ります。
 *   引数: テストする実際の値
 *   戻り値: マッチャー関数（toBe, toEqual など）を呼び出せるオブジェクト
 * 
 * - toBe(): 厳密な等価性（===）をチェックするマッチャー関数。
 *   引数: 期待される値
 *   例: expect(2 + 2).toBe(4) // 成功
 *       expect({}).toBe({})   // 失敗（別オブジェクト）
 */
import { describe, it, expect } from 'vitest';

describe('example test', () => {
  // 最も基本的なテストケース - 常に成功する
  it('should work', () => {
    expect(true).toBe(true);  // true === true なので成功する
  });
  
  // 追加の例: 様々なマッチャーの使用例
  it('demonstrates different matchers', () => {
    // toBe: 厳密な等価性（===）
    expect(1 + 1).toBe(2);
    
    // toEqual: 値の等価性（オブジェクトの内容比較）
    expect({ name: 'test' }).toEqual({ name: 'test' });
    
    // not: マッチャーの否定
    expect(1 + 1).not.toBe(3);
  });
});
